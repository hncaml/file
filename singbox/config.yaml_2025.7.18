# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 43200
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "" 


# 用于下载订阅时指定UA
global-ua: mihomo
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
  
# 控制面板
external-controller: 0.0.0.0:9095
secret: ""
external-ui: ui
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配进程 always/strict/off
find-process-mode: off
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.windowsupdate.com"
    - "+.microsoft.com"
    - "+.googleapis.com"
    - "+.icloud.com"
    - "+.amazonaws.com"
    - "+.samsung.com"
    - "+.hicloud.com"
    - "+.baidu.com"
    - "+.alibaba.com"
    - "+.qq.com"
    - "+.cdn.*.*"
    - "+.ads.*.*"
    - "+.analytics.*.*"
    - "rule-set:ad_domain"
    - "rule-set:iot_domain"
  route-exclude-addrss-set:
    - "rule-set:cn_ip"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 1500
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  cache-size: 4096
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
  default-nameserver:
    - "223.5.5.5"
    - "119.29.29.29"
    - 114.114.114.114
  nameserver:
    - "https://dns.cloudflare.com/dns-query"
    - "https://dns.google/dns-query"
    - "https://dns.alidns.com/dns-query"
    - "https://doh.360.cn/dns-query"
    - 223.5.5.5
    - 119.29.29.29
    - 114.114.114.114
  proxy-server-nameserver:
    - "https://dns.cloudflare.com/dns-query"
    - "https://dns.google/dns-query"
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
      - "223.5.5.5"
      - "119.29.29.29"
      - 114.114.114.114
      - "https://dns.alidns.com/dns-query"
    "rule-set:geolocation-!cn,gfw_domain":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
   
proxies:
- name: "🟢 直连"
  type: direct
  udp: true
 
# 锚点
pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 香港自动, ♻️ 日本自动,♻️ 新加坡自动, ♻️ 美国自动,♻️ 英国自动, ♻️ 自动选择, 🔯 香港故转,🔯 日本故转,🔯 新加坡故转,🔯 美国故转,🔯 英国故转,🇭🇰 香港节点, 🇯🇵 日本节点, SG 新加坡节点, 🇺🇲 美国节点, uk 英国节点,🌐 全部节点, 🟢 直连]}
# 策略组
proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动,♻️ 美国自动,♻️ 英国自动, ♻️ 自动选择, 🔯 香港故转,🔯 日本故转,🔯 新加坡故转,🔯 美国故转,🔯 英国故转, 🇭🇰 香港节点, 🇯🇵 日本节点, SG 新加坡节点, 🇺🇲 美国节点, uk 英国节点,🌐 全部节点, 🟢 直连]}
  - {name: 📹 YouTube,!!merge <<: *pr}
  - {name: 🐛 cloudflare,!!merge <<: *pr}
  - {name: 💞 pornhub,!!merge <<: *pr}
  - {name: 🍀 Google,!!merge <<: *pr}
  - {name: 🤖 ChatGPT,!!merge <<: *pr}
  - {name: 💢 Meta,!!merge <<: *pr}
  - {name: 👨🏿‍💻 GitHub,!!merge <<: *pr}
  - {name: 🐬 OneDrive,!!merge <<: *pr}
  - {name: 🪟 Microsoft,!!merge <<: *pr}
  - {name: 🎵 TikTok,!!merge <<: *pr}
  - {name: 📲 Telegram,!!merge <<: *pr}
  - {name: 🎥 NETFLIX,!!merge <<: *pr}
  - {name: ✈️ Speedtest,!!merge <<: *pr}
  - {name: 💶 PayPal,!!merge <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🐟 漏网之鱼,!!merge <<: *pr}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: SG 新加坡节点, type: select, include-all: true, filter: "(?i)新|sg|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|united states|united states"}
  - {name: uk 英国节点, type: select, include-all: true, filter: "(?i)英|uk|UK|United Kingdom"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }  
  - {name: 🔯 新加坡故转, type: fallback, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(新|SG|(?i)Singapore))^((?!(港|台|韩|日|美)).)*$" }  
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$" }  
  - {name: 🔯 英国故转, type: fallback, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(英|uk|(?i)UK|Kingdom))^((?!(港|台|日|韩|新)).)*$" }  
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(新|SG|(?i)Singapore))^((?!(港|台|韩|日|美)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 英国自动, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "(?=.*(英|uk|(?i)UK|Kingdom))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 600, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

rules:
  # 高频直连或拒绝提前
  - DOMAIN-SUFFIX,lan,🟢 直连
  - DOMAIN-SUFFIX,local,🟢 直连
  - DOMAIN-SUFFIX,qq.com,🟢 直连
  - DOMAIN-SUFFIX,camxl.top,🟢 直连
  - DOMAIN-SUFFIX,dkys.org,REJECT
  - DOMAIN-SUFFIX,youtusoft.com,REJECT
  - DOMAIN-SUFFIX,hostbuf.com,REJECT
  - DOMAIN-SUFFIX,tcpspeed.com,REJECT
  - DOMAIN-SUFFIX,wn1998.com,REJECT

  # 私有/内网优先
  - RULE-SET,private_domain,🟢 直连
  - RULE-SET,private_ip,🟢 直连,no-resolve

  # 系统/推送服务提前,youtube要放在google前面
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,google_ip,🍀 Google,no-resolve
  # Microsoft里面包含了github，所以要放前面
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft

  # 高流量业务优先
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_domain,📲 Telegram

  # 代理分流
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,meta_domain,💢 Meta
  - RULE-SET,ai,🤖 ChatGPT

  # 其他规则集
  - RULE-SET,cloudflare_domain,🐛 cloudflare
  - RULE-SET,cloudflare_ip,🐛 cloudflare,no-resolve
  - RULE-SET,pornhub_domain,💞 pornhub
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,paypal_domain,💶 PayPal

# 区域分流规则最后
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连,no-resolve

 # 最后兜底
  - MATCH,🐟 漏网之鱼

rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  #qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: {!!merge <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  ai: {!!merge <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/AI.list"}
  youtube_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  pornhub_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/pornhub.mrs"}
  github_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  meta_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/meta.mrs"}
  geolocation-!cn: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cloudflare_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs"}
  cloudflare_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cloudflare.mrs"}
  private_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"}
  cn_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  ad_domain: {!!merge <<: *class, url: "https://raw.githubusercontent.com/yourrepo/ad-skip.list"}
  iot_domain: {!!merge <<: *class, url: "https://raw.githubusercontent.com/yourrepo/iot-skip.list"}
